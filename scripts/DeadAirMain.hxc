import funkin.audio.FunkinSound;
import funkin.data.event.SongEventRegistry;
import funkin.data.song.SongEventDataRaw;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.SongEventScriptEvent;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.Countdown;
import funkin.play.GameOverSubState;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.ResultState;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.transition.stickers.StickerSubState;

import flixel.FlxG;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;

class DeadAirMain extends ScriptedModule {
    var state:PlayState;
    var overState:GameOverSubState;
    var hooks:DeadAirHooks;

    var enterDeadAirMenu = false;

    var treeCam:FunkinCamera;
    var tree:FunkinSprite;
    var musicPlayed:Bool = false;

    function new() {
        super("DeadAirMain");
        hooks = new DeadAirHooks();
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (!isDeadAirSong()) return;
        state = PlayState.instance;

        state.discordRPCAlbum = "https://raw.githubusercontent.com/Starexify/DEAD-AIR-V-Slice/refs/heads/0.6.x/images/freeplay/albumRoll/" + state.currentChart.songName + ".png";

        fireEvents();
    }

    override function onSongStart(event:ScriptEvent) {
        if (isDeadAirSong()) fireEvents();
    }

    override function onCountdownStart(event:CountdownScriptEvent) {
        if (isDeadAirSong()) FlxTimer.wait(0.01, () -> Countdown.skipCountdown());
    }

    override function onSubStateOpenEnd(event:SubStateScriptEvent) {
        if (Std.isOfType(event.targetState, PauseSubState) && isDeadAirSong()) {
            var pauseState:PauseSubState = event.targetState;

            if (PlayState.instance.currentChart.songName == "shelter") {
                pauseState.metadata.forEach(text -> text.font = Paths.font("shelter.ttf"));
            }

            pauseState.pauseMusic.stop();
            pauseState.pauseMusic = FunkinSound.load(Paths.music(hooks.pauseMusicPath), true, true);
            pauseState.pauseMusic.play(false, FlxG.random.int(0, Std.int(pauseState.pauseMusic.length / 2)));
            pauseState.pauseMusic.fadeIn(PauseSubState.MUSIC_FADE_IN_TIME, 0, PauseSubState.MUSIC_FINAL_VOLUME);

            FlxTween.cancelTweensOf(pauseState.background);
            FlxTween.tween(pauseState.background, {alpha: 1}, 1.2, {ease: FlxEase.quartOut});
        }

        if (Std.isOfType(event.targetState, ResultState) && isDeadAirSong()) {
            var resultState:ResultState = event.targetState;
            resultState.members[0].color = resultState.cameraBG.bgColor = 0xFF000000;
            for (atlasAnim in resultState.characterAtlasAnimations) if (atlasAnim != null) atlasAnim.sprite.alpha = 0;
            for (sparrowAnim in resultState.characterSparrowAnimations) if (sparrowAnim != null) sparrowAnim.sprite.alpha = 0;
        }
    }

    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        var inMainMenu = ModuleHandler.getModule("DeadAirHooks").scriptGet("inMainMenu");

        if (inMainMenu) {
            if (Std.isOfType(event.targetState, FreeplayState)) {
                FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
            } else if (Std.isOfType(event.targetState, StickerSubState)) {
                var stickerState:StickerSubState = event.targetState;
                stickerState.targetState = state -> ScriptedMusicBeatState.init("ui.DeadAirMenuState");
                stickerState.grpStickers.visible = false;
                stickerState.sounds = [];

                var fadeCam = new FunkinCamera("fadeCam");
                FlxG.cameras.add(fadeCam, false);
                fadeCam.bgColor = 0x0;
                fadeCam.visible = true;
                fadeCam.fade(0xFF000000, 1);
            }
        }

        if (!isDeadAirSong() || !Std.isOfType(event.targetState, GameOverSubState)) return;

        overState = event.targetState;

        if (PlayState.instance.currentChart.songName == "comatose") {
            overState.gameOverMusic = FunkinSound.load(Paths.music("gameplay/gameover/comaOver"), 1, true);
            overState.gameOverMusic.play();
        } else {
            setupDeadAirGameOver(overState);
        }
    }

    override function onSongRetry(event:SongRetryEvent) {
        if (treeCam != null) FlxG.cameras.remove(treeCam);
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (Std.isOfType(event.targetState, MainMenuState) && ModuleHandler.getModule("DeadAirHooks").scriptGet("inMainMenu")) {
            FlxG.sound.music.stop();
            FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
        }
    }

    override function onUpdate(event:UpdateScriptEvent) {
        handleDeadMenu();
        handleGOEndMusic();
    }

    // Helper Methods
    function isDeadAirSong():Bool {
        return PlayState.instance != null && hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName);
    }

    function fireEvents() {
        var events = [
            {type: "FocusCamera", params: {char: 0}},
            {type: "SetCameraBop", params: {intensity: 0}}
        ];

        for (event in events) {
            var songEvent = new SongEventDataRaw(PlayState.instance.songPosition, event.type, event.params);
            var scriptEvent = new SongEventScriptEvent(songEvent);
            if (!scriptEvent.eventCanceled) SongEventRegistry.handleEvent(songEvent);
        }
    }

    function setupDeadAirGameOver(overState:GameOverSubState) {
        overState.mustNotExit = true;
        GameOverSubState.blueBallSuffix = "null-";
        var prevOverState = overState;
        tree = FunkinSprite.create(400, 200, "tree");
        tree.scale.set(0.7, 0.7);
        tree.updateHitbox();
        treeCam = new FunkinCamera("fadeCam");
        FlxG.cameras.add(treeCam, false);
        tree.camera = treeCam;

        overState.gameOverMusic = FunkinSound.load(Paths.music("gameplay/gameover/deadOverStart"));
        overState.gameOverMusic.onComplete = () -> {
            prevOverState.mustNotExit = false;
            prevOverState.gameOverMusic = FunkinSound.load(Paths.music("gameplay/gameover/deadOver"), 1, true);
            prevOverState.gameOverMusic.play();
            prevOverState.add(tree);
        };
        overState.gameOverMusic.play();
    }

    // Handlers
    function handleGOEndMusic() {
        if (GameOverSubState.instance == null) return;
        if (overState != null && overState.isEnding) {
            if (PlayState.instance.currentChart.songName != "comatose" && !musicPlayed) {
                tree.destroy();
                overState.gameOverMusic.stop();
                overState.gameOverMusic = FunkinSound.load(Paths.music("gameplay/gameover/deadOverEnd"));
                overState.gameOverMusic.play();
                musicPlayed = true;
            }
        }
    }

    function handleDeadMenu() {
        if (Std.isOfType(FlxG.state, MainMenuState) && FlxG.keys.justPressed.TAB) {
            enterDeadAirMenu = !enterDeadAirMenu;
            FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
        }
    }

    // Mute Miss Sounds for dead air songs
    override function onNoteMiss(event:NoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }

    override function onNoteHoldDrop(event:HoldNoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }
}