import funkin.data.event.SongEventRegistry;
import funkin.data.song.SongEventDataRaw;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.SongEventScriptEvent;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.Countdown;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.ResultState;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.mainmenu.MainMenuState;

import flixel.FlxG;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.graphics.FunkinSprite;
import funkin.audio.FunkinSound;
import funkin.ui.transition.stickers.StickerSubState;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinCamera;
import funkin.ui.options.OptionsState;

class DeadAirMain extends ScriptedModule {
    var state:PlayState;
    var hooks:DeadAirHooks;

    var enterDeadAirMenu = false;

    function new() {
        super("DeadAirMain");
        hooks = new DeadAirHooks();
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;

        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) {
            state = PlayState.instance;

            state.discordRPCAlbum = "https://raw.githubusercontent.com/Starexify/DEAD-AIR-V-Slice/refs/heads/0.6.x/images/freeplay/albumRoll/" + state.currentChart.songName + ".png";

            var events = [
                {type: "FocusCamera", params: {char: 0}},
                {type: "SetCameraBop", params: {intensity: 0}}
            ];

            for (event in events) {
                var songEvent = new SongEventDataRaw(state.songPosition, event.type, event.params);
                var scriptEvent = new SongEventScriptEvent(songEvent);
                if (!scriptEvent.eventCanceled) SongEventRegistry.handleEvent(songEvent);
            }

            //state.moveToResultsScreen(false);
        }
    }

    override function onCountdownStart(event:CountdownScriptEvent) {
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) {
            new FlxTimer().start(0.01, timer -> {
                Countdown.skipCountdown();
            });
        }
    }

    override function onSubStateOpenEnd(event:SubStateScriptEvent) {
        if (Std.isOfType(event.targetState, PauseSubState)) {
            var pauseState:PauseSubState = event.targetState;
            if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) {
                if (PlayState.instance != null && PlayState.instance.currentChart.songName == "shelter") {
                    pauseState.metadata.forEach(text -> text.font = Paths.font("shelter.ttf"));
                }

                pauseState.pauseMusic.stop();
                pauseState.pauseMusic = FunkinSound.load(Paths.music(hooks.pauseMusicPath), true, true);
                pauseState.pauseMusic.play(false, FlxG.random.int(0, Std.int(pauseState.pauseMusic.length / 2)));
                pauseState.pauseMusic.fadeIn(PauseSubState.MUSIC_FADE_IN_TIME, 0, PauseSubState.MUSIC_FINAL_VOLUME);

                FlxTween.cancelTweensOf(pauseState.background);
                FlxTween.tween(pauseState.background, {alpha: 1}, 1.2, {ease: FlxEase.quartOut});
            }
        }

        if (Std.isOfType(event.targetState, ResultState) && hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) {
            var resultState:ResultState = event.targetState;
            resultState.members[0].color = resultState.cameraBG.bgColor = 0xFF000000;
        }
    }

    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (ModuleHandler.getModule("DeadAirHooks").scriptGet("inMainMenu")) {
            if (Std.isOfType(event.targetState, FreeplayState)) {
                FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
            } else if (Std.isOfType(event.targetState, StickerSubState)) {
                var stickerState:StickerSubState = event.targetState;
                stickerState.targetState = state -> ScriptedMusicBeatState.init("ui.DeadAirMenuState");
                stickerState.grpStickers.visible = false;
                stickerState.sounds = [];
                var fadeCam:FunkinCamera = new FunkinCamera("fadeCam");
                FlxG.cameras.add(fadeCam, false);
                fadeCam.bgColor = 0x0;
                fadeCam.visible = true;

                fadeCam.fade(0xFF000000, 1);
            }
        }
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (Std.isOfType(event.targetState, MainMenuState) && ModuleHandler.getModule("DeadAirHooks").scriptGet("inMainMenu")) {
            FlxG.sound.music.stop();
            FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
        }
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (Std.isOfType(FlxG.state, MainMenuState) && FlxG.keys.justPressed.TAB) {
            enterDeadAirMenu = !enterDeadAirMenu;
            FlxG.switchState(ScriptedMusicBeatState.init("ui.DeadAirMenuState"));
        }
    }

    // Mute Miss Sounds for dead air songs
    override function onNoteMiss(event:NoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }

    override function onNoteHoldDrop(event:HoldNoteScriptEvent) {
        if (PlayState.instance == null) return;
        if (hooks.INCL_SONGS.contains(PlayState.instance.currentChart.songName)) event.playSound = false;
    }
}