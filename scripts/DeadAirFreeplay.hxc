import funkin.audio.FunkinSound;
import funkin.data.song.SongRegistry;
import funkin.graphics.FunkinCamera;
import funkin.graphics.shaders.HSVShader;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayStatePlaylist;
import funkin.save.Save;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.freeplay.SongMenuItem;
import funkin.ui.transition.LoadingState;

import flixel.FlxG;
import flixel.util.FlxTimer;

import openfl.filters.ShaderFilter;

class DeadAirFreeplay extends ScriptedModule {
    var hooks:DeadAirHooks;

    function new() {
        super("DeadAirFreeplay");
        hooks = new DeadAirHooks();
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (Std.isOfType(FlxG.state.subState, FreeplayState)) {
            var freeplay:FreeplayState = FlxG.state.subState;
            var capsule:SongMenuItem = freeplay.grpCapsules.members[freeplay.curSelected];
            if (capsule != null && freeplay.curSelected != 0 && hooks.SONG_IDS.contains(capsule?.freeplayData?.data.id)) {
                capsule.onConfirm = () -> if (!freeplay.busy) capsuleOnConfirmDeadAir(freeplay, capsule);
            }
        }
    }

    function capsuleOnConfirmDeadAir(fpState:FreeplayState, cap:SongMenuItem) {
        fpState.busy = true;
        fpState.letterSort.inputEnabled = false;

        PlayStatePlaylist.isStoryMode = false;

        var targetSongId:String = (FlxG.random.bool(20) && !Save.instance.hasBeatenSong("tmpb2hpbw==")) ? "tmpb2hpbw==" : cap.freeplayData.data.id;
        var targetSongNullable = SongRegistry.instance.fetchEntry(targetSongId);
        if (targetSongNullable == null) {
            FlxG.log.warn("WARN: could not find song with id (" + targetSongId + ")");
            return;
        }
        var targetSong = targetSongNullable;
        var targetLevelId:String = cap.freeplayData.levelId;
        var targetInstId:String = null;
        PlayStatePlaylist.campaignId = targetLevelId;

        var targetDifficulty = targetSong.getDifficulty(fpState.currentDifficulty, fpState.currentVariation);
        if (targetDifficulty == null) {
            FlxG.log.warn("WARN: could not find difficulty with id (" + currentDifficulty + ")");
            return;
        }

        if (targetInstId == null) {
            var baseInstrumentalId:String = targetSong.getBaseInstrumentalId(fpState.currentDifficulty, fpState.currentVariation);
            targetInstId = baseInstrumentalId;
        }

        for (i in 0...fpState.grpCapsules.members.length) {
            if (i == fpState.curSelected) continue;
            fpState.grpCapsules.members[i].alpha = 0;
        }

        FlxG.sound.music.stop();
        FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
        fpState.grpCapsules.members[fpState.curSelected].forcePosition();
        fpState.grpCapsules.members[fpState.curSelected].confirm();

        // Change album saturation
        var albumCam = new FunkinCamera('albumCam');
        albumCam.bgColor = 0x0;
        albumCam.visible = true;
        FlxG.cameras.add(albumCam, false);
        var colorShader:HSVShader = new HSVShader();
        colorShader.saturation = 0;
        FlxG.state.subState.albumRoll.cameras = [albumCam];
        albumCam.filters = [new ShaderFilter(colorShader)];

        new FlxTimer().start(fpState.styleData.getStartDelay(), tmr -> {
            var fadeCam:FunkinCamera = new FunkinCamera("fadeCam");
            FlxG.cameras.add(fadeCam, false);
            fadeCam.bgColor = 0x0;
            fadeCam.visible = true;

            fadeCam.fade(0xFF000000, 1);
        });

        new FlxTimer().start(3.5, tmr -> {
            FunkinSound.emptyPartialQueue();
            Paths.setCurrentLevel(targetLevelId);
            LoadingState.loadPlayState({
                targetSong: targetSong,
                targetDifficulty: FlxG.state.subState.currentDifficulty,
                targetVariation: FlxG.state.subState.currentVariation,
                targetInstrumental: targetInstId,
                practiceMode: false,
                minimalMode: false,

                botPlayMode: false,
            }, true);
        });
    }
}