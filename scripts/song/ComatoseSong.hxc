import funkin.Conductor;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.play.PlayState;
import funkin.play.song.ScriptedSong;
import funkin.util.FileUtilSandboxed;

import flixel.FlxG;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;

class ComatoseSong extends ScriptedSong {
    var state:PlayState;

    var pauseGame:Bool = false;
    var songPosition:Float;

    var songTitle:FunkinSprite;
    var songBy:FunkinSprite;
    var songBased:FunkinSprite;

    var glitch:FunkinSprite;

    function new() {
        super("comatose");
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;
        state = PlayState.instance;
        state.camGame.visible = false;
        state.currentStage.getBoyfriend().ignoreExclusionPref = [];

        for (note in state.playerStrumline.strumlineNotes.members) {
            FlxTween.cancelTweensOf(note);
            note.alpha = 1;
        }

        songTitle = FunkinSprite.create(0, 0, "titlecards/comatose/title");
        songTitle.camera = state.camHUD;
        state.add(songTitle);

        songBy = FunkinSprite.create(0, 0, "titlecards/comatose/by");
        songBy.camera = state.camHUD;
        songBy.alpha = 0;
        state.add(songBy);

        songBased = FunkinSprite.create(0, 0, "titlecards/comatose/based");
        songBased.camera = state.camHUD;
        songBased.alpha = 0;
        state.add(songBased);

        glitch = FunkinSprite.create(0, 0).makeSolidColor(FlxG.width * 4, FlxG.height * 4, 0xFFFF0003);
        glitch.blend = 9;
        glitch.camera = state.camCutscene;
        glitch.visible = false;
        state.add(glitch);
    }

    override function onStepHit(event:SongTimeScriptEvent) {
        if (state == null) return;
        switch (event.step) {
            case 16:
                FlxTween.tween(songBy, {alpha: 1}, 0.4);
            case 36:
                FlxTween.tween(songBased, {alpha: 1}, 0.4);
            case 48:
                state.remove(songTitle);
                state.remove(songBy);
                state.remove(songBased);
            case 64:
                state.camGame.visible = true;
                state.currentStage.getBoyfriend().idleSuffix = "-alt";
            case 462:
                glitch.visible = true;
                FlxTimer.wait(0.000001, () -> pause(((60 / state.conductorInUse.bpm) * 1000) / 1000));
            case 463: state.remove(glitch);
            case 920: state.currentStage.getBoyfriend().idleSuffix = "";
        }
    }

    function pause(time:Float) {
        pauseGame = true;
        state.mayPauseGame = false;
        state.isInCutscene = true;
        FlxTimer.wait(time, () -> {
            songPosition = state.conductorInUse.songPosition;
            pauseGame = false;
            state.mayPauseGame = true;
            state.isInCutscene = false;
        });
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (state == null) return;
        if (pauseGame) Conductor.instance.update(songPosition);
    }

    override function onGameOver(event:ScriptEvent) {
        FileUtilSandboxed.writeStringToPath("mods/youwillbeasleepinbed.txt", "i will be there and watch over you");
        FileUtilSandboxed.openSelectFile("mods/youwillbeasleepinbed.txt");
    }

    override function onSongRetry(event:ScriptEvent) {
        if (songBy != null) songBy.destroy();
        if (songTitle != null) songTitle.destroy();
        if (songBased != null) songBased.destroy();
        FileUtilSandboxed.deleteFile("mods/youwillbeasleepinbed.txt");
    }
}