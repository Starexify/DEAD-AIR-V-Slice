package ui;

import funkin.audio.FunkinSound;
import funkin.data.song.SongRegistry;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.graphics.shaders.HSVShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.save.Save;
import funkin.ui.MenuTypedItem;
import funkin.ui.MenuTypedList;
import funkin.ui.transition.LoadingState;

import flixel.FlxG;
import flixel.FlxObject;
import flixel.math.FlxRect;
import flixel.text.FlxText;
import flixel.util.FlxTimer;

import openfl.filters.ShaderFilter;

class DeadAirPlaySubState extends ScriptedMusicBeatSubState {
    var hooks:DeadAirHooks;
    var menuItems:MenuTypedList<MenuTypedItem>;

    var blockyFilter:ScriptedFlxRuntimeShader = ScriptedFlxRuntimeShader.init("Testing");
    var colorShader:HSVShader = new HSVShader();

    var camItems:FunkinCamera;
    var camAlbum:FunkinCamera;

    var camFollow:FlxObject;

    var album:FunkinSprite;

    // Constants
    var ITEM_HEIGHT = 77;
    var SELECTED_SCALE = 1.2;
    var NORMAL_SCALE = 1.0;
    var FADE_DURATION = 1.2;
    var TIMER_DELAY = 2.0;

    override function create() {
        super.create();

        hooks = new DeadAirHooks();
        setupCameras();
        setupMenuItems();
        setupAlbum();

        FlxTimer.wait(0.01, enableMenu);
    }

    override function update(elapsed:Float) {
        if (controls.BACK) {
            FunkinSound.playOnce(Paths.sound("dead-air/cancelMenu"));
            close();
        }

        camItems.target = camFollow;
        camItems.deadzone = FlxRect.get(camItems.width * 0.5, camItems.height * 0.5 - 25, 1, 1);

        super.update(elapsed);
    }

    // Helper methods
    function setupCameras() {
        blockyFilter.setFloatArray("uBlocksize", [1, 1]);

        camItems = createCamera("camItems", 75, 74, 350, 570, 0xFF000000);
        //camItems.filters = [new ShaderFilter(blockyFilter)];
        camAlbum = createCamera("camAlbum", 725, 105, 510, 505, 0xFFFFFFFF);
        camAlbum.filters = [new ShaderFilter(colorShader)];

        camFollow = new FlxObject(0, 0, 1, 1);
        add(camFollow);
        camFollow.x = camItems.width * 0.5;
    }

    function setupAlbum() {
        album = FunkinSprite.create(0, 0);
        updateAlbumTexture(menuItems.selectedItem.name);
        album.camera = camAlbum;
        add(album);
    }

    function updateAlbumTexture(textureName:String) {
        album.loadTexture("freeplay/albumRoll/" + textureName);
        album.setGraphicSize(camAlbum.width - 10, camAlbum.height - 10);
        album.updateHitbox();
        album.setPosition(5, 5);
    }

    function createCamera(name:String, x:Int, y:Int, width:Int, height:Int, bgColor:Int):FunkinCamera {
        var cam = new FunkinCamera(name, x, y, width, height);
        cam.bgColor = bgColor;
        FlxG.cameras.add(cam, false);
        return cam;
    }

    function setupMenuItems() {
        menuItems = new MenuTypedList();
        menuItems.camera = camItems;
        menuItems.enabled = false;
        menuItems.onAcceptPress.add(onMenuAccept);
        menuItems.onChange.add(onMenuChange);

        for (songId in hooks.SONG_IDS) {
            var targetSong = SongRegistry.instance.fetchEntry(songId);
            if (targetSong == null) {
                FlxG.log.warn("WARN: could not find song with id (" + songId + ")");
                continue;
            }
            createMenuItem(songId, targetSong.songName, () -> startSong(songId), true);
        }

        add(menuItems);
    }

    function createMenuItem(name:String, text:String, callback:Void -> Void, fireInstantly:Bool) {
        var item = new MenuTypedItem(0, 0, new FlxText(), name);
        item.setEmptyBackground();
        item.fireInstantly = fireInstantly;
        item.ID = menuItems.length;
        item.callback = callback;
        item.label.setFormat("Neuton-Regular", 29);
        item.label.text = text;
        item.x = (camItems.width - item.label.width) * 0.5;

        menuItems.addItem(name, item);
    }

    function onMenuAccept(item) {
        FunkinSound.stopAllAudio();
        FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
    }

    function onMenuChange(item) {
        FunkinSound.stopAllAudio();
        FunkinSound.playOnce(Paths.sound("dead-air/scrollMenu"));

        camFollow.y = item.getGraphicMidpoint().y - item.height * 2;

        resetMenuItemStyles();
        item.label.scale.set(SELECTED_SCALE, SELECTED_SCALE);
        updateAlbumTexture(item.name);
    }

    function resetMenuItemStyles() {
        for (menuItem in menuItems.members) {
            if (menuItem?.label != null) {
                menuItem.label.scale.set(NORMAL_SCALE, NORMAL_SCALE);
                menuItem.alpha = 1.0;
            }
        }
    }

    function startSong(songId:String) {
        var finalSongId = getSecretSongOrDefault(songId);
        menuItems.enabled = false;
        FlxG.sound.music.stop();
        colorShader.saturation = 0;

        if (camItems != null) FlxG.cameras.remove(camItems);

        new FlxTimer().start(TIMER_DELAY, timer -> {
            var fadeCam = createCamera("fadeCam", 0, 0, FlxG.width, FlxG.height, 0x0);
            fadeCam.fade(0xFF000000, FADE_DURATION, false, () -> {
                loadSong(finalSongId);
            });
        });
    }

    function getSecretSongOrDefault(originalSongId:String):String {
        for (secretSong in hooks.SECRET_SONGS) {
            if (FlxG.random.bool(secretSong.chance) && !Save.instance.hasBeatenSong(secretSong.songId)) return secretSong.songId;
        }
        return originalSongId;
    }

    function loadSong(songId:String) {
        var targetSong = SongRegistry.instance.fetchEntry(songId);
        var currentDifficulty = "normal";
        var currentVariation = "default";
        var targetInstId = targetSong.getBaseInstrumentalId(currentDifficulty, currentVariation);

        LoadingState.loadPlayState({
            targetSong: targetSong,
            targetDifficulty: currentDifficulty,
            targetVariation: currentVariation,
            targetInstrumental: targetInstId,
            practiceMode: false,
            minimalMode: false,
            botPlayMode: false,
        }, true);
    }

    function enableMenu() {
        menuItems.enabled = true;
        for (i in 0...menuItems.length) {
            menuItems.members[i].y = ITEM_HEIGHT * i;
            menuItems.members[i].alpha = 1.0;
        }
        //menuItems.members[0].scale.set(SELECTED_SCALE, SELECTED_SCALE);
    }

    override function close() {
        if (camAlbum != null) FlxG.cameras.remove(camAlbum);
        if (camItems != null) FlxG.cameras.remove(camItems);

        super.close();
    }
}