package ui;

import funkin.audio.FunkinSound;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.graphics.shaders.HSVShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.ui.MenuTypedItem;
import funkin.ui.MenuTypedList;

import flixel.FlxG;
import flixel.FlxObject;
import flixel.math.FlxRect;
import flixel.text.FlxText;
import flixel.util.FlxTimer;

import openfl.filters.ShaderFilter;

class DeadAirPlaySubState extends ScriptedMusicBeatSubState {
    var hooks:DeadAirHooks;
    var menuItems:MenuTypedList<MenuTypedItem>;

    var blockyFilter:ScriptedFlxRuntimeShader = ScriptedFlxRuntimeShader.init("Testing");

    var camItems:FunkinCamera;
    var camAlbum:FunkinCamera;

    var camFollow:FlxObject;

    var album:FunkinSprite;

    override function create() {
        hooks = new DeadAirHooks();

        blockyFilter.setFloatArray("uBlocksize", [2, 2]);

        camItems = new FunkinCamera("camItems", 75, 74, 350, 570);
        camItems.bgColor = 0xFF000000;
        FlxG.cameras.add(camItems, false);
        camItems.filters = [new ShaderFilter(blockyFilter)];

        camAlbum = new FunkinCamera("camAlbum", 725, 105, 510, 505);
        camAlbum.bgColor = 0xFFFFFFFF;
        FlxG.cameras.add(camAlbum, false);

        camFollow = new FlxObject(0, 0, 1, 1);
        add(camFollow);
        camFollow.x = camItems.width * 0.5;

        menuItems = new MenuTypedList();
        menuItems.camera = camItems;
        menuItems.enabled = false;

        for (songId in hooks.SONG_IDS) {
            createMenuItem(songId, () -> trace(songId), false);
        }

        album = FunkinSprite.create(0, 0);
        album.loadTexture("freeplay/albumRoll/" + menuItems.selectedItem.name);
        album.setGraphicSize(camAlbum.width - 10, camAlbum.height - 10);
        album.updateHitbox();
        album.setPosition(5, 5);
        album.camera = camAlbum;
        add(album);

        menuItems.onChange.add(item -> {
            FunkinSound.stopAllAudio();
            FunkinSound.playOnce(Paths.sound("dead-air/scrollMenu"));
            camFollow.y = item.getGraphicMidpoint().y;
            album.loadTexture("freeplay/albumRoll/" + item.name);
            album.setGraphicSize(camAlbum.width - 10, camAlbum.height - 10);
            album.updateHitbox();
        });
        menuItems.onAcceptPress.add(item -> {
            FunkinSound.stopAllAudio();
            var colorShader:HSVShader = new HSVShader();
            colorShader.saturation = 0;
            camAlbum.filters = [new ShaderFilter(colorShader)];
            FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
        });

        add(menuItems);
        FlxTimer.wait(0.01, () -> menuItems.enabled = true);

        for (i in 0...menuItems.length) menuItems.members[i].y = 90 * i;

        super.create();
    }

    override function update(elapsed:Float) {
        if (controls.BACK) {
            FunkinSound.playOnce(Paths.sound("dead-air/cancelMenu"));
            close();
        }

        camItems.target = camFollow;
        camItems.deadzone = FlxRect.get(camItems.width * 0.5, (camItems.height - menuItems.selectedItem.height) * 0.5, 1, 1);

        super.update(elapsed);
    }

    // Helper methods
    function createMenuItem(name:String, callback:Void -> Void, fireInstantly:Bool) {
        var item = new MenuTypedItem(0, 0, new FlxText(), name);
        item.setEmptyBackground();
        item.fireInstantly = fireInstantly;
        item.ID = menuItems.length;
        item.callback = callback;
        item.label.setFormat("Neuton-Regular", 35);
        item.label.text = item.name;
        item.x = (camItems.width - item.label.width) * 0.5;

        menuItems.addItem(name, item);
    }

    override function close() {
        if (camAlbum != null) FlxG.cameras.remove(camAlbum);
        if (camItems != null) FlxG.cameras.remove(camItems);

        super.close();
    }
}