package ui;

import funkin.Conductor;
import funkin.Preferences;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.ui.AtlasMenuItem;
import funkin.ui.AtlasMenuList;
import funkin.ui.MenuTypedList;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.options.OptionsState;
import funkin.util.WindowUtil;

import flixel.FlxG;
import flixel.FlxSubState;
import flixel.addons.transition.FlxTransitionableState;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;

import openfl.filters.ShaderFilter;

import Main;

class DeadAirMenuState extends ScriptedMusicBeatState {
    var menuItems:MenuTypedList<AtlasMenuItem>;

    var camMenu:FunkinCamera;

    var bg:FunkinSprite;
    var logo:FunkinSprite;
    var separator:FunkinSprite;
    var buttonPointer:FunkinSprite;

    var rememberedSelectedIndex:Int = 0;
    var isInMenu:Bool = false;

    var blockyFilter:ScriptedFlxRuntimeShader = ScriptedFlxRuntimeShader.init("Testing");

    override function create() {
        blockyFilter.setFloatArray("uBlocksize", [3, 3]);

        camMenu = new FunkinCamera("camMenu");
        camMenu.bgColor = 0x0;
        FlxG.cameras.add(camMenu, false);
        camMenu.filters = [new ShaderFilter(blockyFilter)];

        WindowUtil.setWindowTitle("FNF': Dead Air");
        showDebugDisplay(false);
        transOut = FlxTransitionableState.defaultTransOut;
        playMenuMusic();

        persistentUpdate = true;
        persistentDraw = true;

        bg = FunkinSprite.create(0, 0, "mainmenu/deadair/ohiogaming");
        bg.frames = Paths.getSparrowAtlas("mainmenu/deadair/ohiogaming");
        bg.animation.addByPrefix("idle", "ohiogaming21", 8, true);
        bg.animation.play("idle");
        bg.scale.y = 0.9;
        bg.updateHitbox();
        bg.screenCenter();
        bg.alpha = 0;
        add(bg);

        logo = FunkinSprite.create(0, 0, "mainmenu/deadair/logo");
        logo.setGraphicSize(Std.int(logo.width * 2));
        logo.updateHitbox();
        logo.screenCenter();
        logo.alpha = 0;
        logo.camera = camMenu;
        add(logo);

        separator = FunkinSprite.create(26, 303, "mainmenu/deadair/sep");
        separator.alpha = 0;
        separator.camera = camMenu;
        add(separator);

        buttonPointer = FunkinSprite.create(0, 0, "mainmenu/deadair/button_pointer");
        buttonPointer.alpha = 0;
        buttonPointer.camera = camMenu;
        add(buttonPointer);

        menuItems = new MenuTypedList();
        menuItems.onChange.add(item -> {
            FunkinSound.stopAllAudio();
            FunkinSound.playOnce(Paths.sound("dead-air/scrollMenu"));
        });
        menuItems.enabled = false;
        menuItems.camera = camMenu;
        add(menuItems);

        createMenuItem("play", "mainmenu/deadair/entries", () -> {
            FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
            openSubState(ScriptedMusicBeatSubState.init("ui.DeadAirPlaySubState"));
        }, true);
        createMenuItem("options", "mainmenu/deadair/entries", () -> {
            FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
            trace("Options");
        }, true);
        createMenuItem("credits", "mainmenu/deadair/entries", () -> {
            FunkinSound.playOnce(Paths.sound("dead-air/confirmMenu"));
            trace("Credits");
        }, true);

        // Position items
        for (i in 0...menuItems.length) menuItems.members[i].y += separator.y + 100 * i;

        var letterWidths:Array<Int> = [37, 37, 37, 74, 37, 37, 37];

        var letterPositions:Array<Int> = [0];
        for (i in 0...letterWidths.length - 1) letterPositions.push(letterPositions[i] + letterWidths[i]);

        var currentLetterIndex:Int = 0;
        new FlxTimer().start(0.8, timer -> {
            currentLetterIndex++;
            if (currentLetterIndex <= letterWidths.length) {
                var totalWidth = 0;
                for (i in 0...currentLetterIndex) totalWidth += letterWidths[i];

                logo.alpha = 1;
                logo.clipRect = new flixel.math.FlxRect(0, 0, totalWidth, logo.frameHeight);
            } else {
                logo.clipRect = null;
                FlxTween.tween(logo, {alpha: 0}, 1, {
                    onComplete: tween -> {
                        camMenu.filters = [];
                        FlxTimer.wait(2, () -> {
                            isInMenu = true;
                            bg.alpha = 1;
                            logo.alpha = 1;
                            separator.alpha = 1;
                            buttonPointer.alpha = 1;
                            for (i in 0...menuItems.length) menuItems.members[i].visible = true;
                            menuItems.enabled = true;

                            logo.x = -107;
                            logo.y = 100;
                            logo.setGraphicSize(Std.int(logo.width * 0.5));

                            showDebugDisplay(true);
                            camMenu.flash(0xFFFFFFFF, 0.9);
                            FlxTween.tween(camMenu, {zoom: 1.1}, 0.1, {
                                onComplete: tween -> FlxTween.tween(camMenu, {zoom: 1}, 0.8)
                            });
                        });
                    }
                });
            }
        }, letterWidths.length + 1);

        super.create();
    }

    override function update(elapsed:Float) {
        super.update(elapsed);

        if (FlxG.keys.justPressed.TAB) startExitState(new MainMenuState());

        buttonPointer.x = menuItems.selectedItem.x + 202;
        buttonPointer.y = menuItems.selectedItem.y + menuItems.selectedItem.height * 0.25;

        Conductor.instance.update();

        if (_exiting) menuItems.enabled = false;
    }

    override function onOpenSubStateComplete(targetState:FlxSubState) {
        camMenu.visible = false;
        menuItems.enabled = false;

        super.onOpenSubStateComplete(targetState);
    }

    override function onCloseSubStateComplete(targetState:FlxSubState) {
        camMenu.visible = true;
        if (isInMenu) menuItems.enabled = true;

        super.onCloseSubStateComplete(targetState);
    }

    override function destroy() {
        remove(bg);
        remove(logo);
        showDebugDisplay(true);
        FlxG.switchState(new MainMenuState());
    }

    // Helper methods
    function createMenuItem(name:String, atlas:String, callback:Void -> Void, fireInstantly:Bool) {
        var item = new AtlasMenuItem(50, 47, name, Paths.getSparrowAtlas(atlas));
        item.fireInstantly = fireInstantly;
        item.callback = callback;
        item.ID = menuItems.length;
        item.animation.addByPrefix(name, name, 0, true);
        item.changeAnim(name);
        item.visible = false;

        menuItems.addItem(name, item);
    }

    function startExitState(state) {
        menuItems.enabled = false;
        rememberedSelectedIndex = menuItems.selectedIndex;

        var duration = 0.4;
        var preservedState = state;
        menuItems.forEach(item -> {
            if (menuItems.selectedIndex != item.ID) {
                FlxTween.tween(item, {alpha: 0}, duration, {ease: FlxEase.quadOut});
            } else {
                item.visible = false;
            }
        });

        FlxG.camera.fade(0xFF000000, duration, false, () -> FlxG.switchState(preservedState));
    }

    function playMenuMusic() {
        FunkinSound.playMusic("deadairMenu", {
            overrideExisting: true,
            restartTrack: false,
            persist: true
        });
    }

    function showDebugDisplay(show:Bool) {
        if (Preferences.debugDisplay) {
            Main.fpsCounter.visible = show;
            Main.memoryCounter.visible = show;
        }
    }
}